{"version":3,"sources":["context/CtxtTodosList/index.js","components/Todo/index.js","components/TodosList/index.js","components/TodoForm/index.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodosConsumer","Consumer","TodosProvider","Provider","Todo","el","this","props","react_default","a","createElement","_ref","handleDeleteTodo","handleToggleDone","style","textDecoration","done","className","text","onClick","_id","Component","TodosList","todos","state","map","components_Todo","key","TodoForm","handelSubmit","e","type","preventDefault","handleChange","handleSubmit","onSubmit","name","value","newtodo","onChange","placeholder","App","_this","setState","Object","defineProperty","target","addTodo","todo","concat","toConsumableArray","handleSetTodo","id","isDone","filter","handleUpdateText","handleEditText","fetch","then","res","json","data","method","headers","Content-Type","body","JSON","stringify","result","handleGetAllTodos","TodoForm_TodoForm","TodosList_TodosList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5b19236.chunk.js","sourcesContent":["import React from \"react\";\nconst Context = React.createContext('');\nexport const TodosConsumer = Context.Consumer;\nexport const TodosProvider = Context.Provider;\n ","import React, { Component } from \"react\";\nimport { TodosConsumer } from \"../../context/CtxtTodosList\";\nimport './style.css'\nclass Todo extends Component {\n  render() {\n    const { el } = this.props;\n    return (\n      <TodosConsumer>\n        {({ handleDeleteTodo, handleToggleDone }) => (\n          <div\n            style={{ textDecoration: el.done ? \"line-through\" : \"\" }}\n            className=\"todo-main\"\n          >\n            <span>{el.text}</span>\n            <button\n              className=\"todo__button-delete\"\n              onClick={() => handleDeleteTodo(el._id)}\n            >\n              X\n            </button>\n            <button\n              onClick={() => handleToggleDone(el._id)}\n              className=\"todo__button-done\"\n            >\n              {el.done ? \"to do\" : \"done\"}\n            </button>\n          </div>\n        )}\n      </TodosConsumer>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport { TodosConsumer } from \"../../context/CtxtTodosList\";\nimport Todo from \"../Todo\";\nimport './style.css';\n\nexport default class TodosList extends Component {\n  render() {\n    return (\n      <div className=\"todolist-main\">\n        <TodosConsumer>\n          {({state}) =>{\n            const {todos} = state;\n            if(todos) {\n              return (todos.map(el => <Todo key={el._id} el={el} />))\n            } else {\n              return <div>Loading ...</div>\n            }\n            \n          }}\n        </TodosConsumer>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { TodosConsumer } from \"../../context/CtxtTodosList\";\nimport './style.css'\n\nexport default class TodoForm extends Component {\n    handelSubmit = e => {\n        if (e && e.type === 'submit') {\n          e.preventDefault();\n        }\n    }\n\n    render() {\n        return (\n            \n        <TodosConsumer>\n          {({state, handleChange, handleSubmit}) =>{\n              return (\n                <form className=\"todo-form-main\" onSubmit={handleSubmit}>\n                <input\n                name=\"newtodo\"\n                value={state.newtodo}\n                onChange={handleChange}\n                placeholder=\"new todo ... \"\n              />\n              <button onClick={handleSubmit}>add todo</button>\n                </form>\n              )\n          }}\n        </TodosConsumer>\n            \n        );\n    }\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodosList from \"./components/TodosList\";\nimport TodoForm from \"./components/TodoForm\";\nimport { TodosProvider } from \"./context/CtxtTodosList\";\n\nclass App extends Component {\n  state = {\n    todos: [],\n    newtodo: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  addTodo = todo => {\n    this.setState({\n      todos: [todo, ...this.state.todos]\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.handleSetTodo({ text: this.state.newtodo, done: false });\n    this.setState({\n      newtodo: \"\"\n    });\n  };\n\n  handleToggleDone = id => {\n    const isDone = !this.state.todos.filter(el => el._id === id)[0].done;\n    this.handleUpdateText(id, isDone);\n  };\n\n  handleEditText = id => {\n    fetch(`/api/updateTodo/${id}`)\n      .then(res => res.json())\n      .then(todos => this.setState({ todos: todos.data }));\n  };\n\n  handleSetTodo = todo => {\n    fetch(`/api/setTodo`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(todo)\n    })\n      .then(res => res.json())\n      .then(todos => {\n        this.setState({ todos: [todos.data, ...this.state.todos] });\n      });\n  };\n\n  handleDeleteTodo = id => {\n    fetch(`/api/deleteTodo`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ id: id })\n    })\n      .then(res => res.json())\n      .then(res => {\n        let todos = this.state.todos.filter(el => el._id !== id);\n        this.setState({ todos });\n      });\n  };\n\n  handleUpdateText = (id, done) => {\n    fetch(`/api/updateTodo`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ id, done })\n    })\n      .then(res => res.json())\n      .then(todo => {\n        let todos = this.state.todos.map(el => {\n          if (el._id === todo.result._id) {\n            el.done = !todo.result.done;\n            return el;\n          } else {\n            return el;\n          }\n        });\n        this.setState({ todos });\n      });\n  };\n\n  handleGetAllTodos = () => {\n    fetch(\"/api/getTodos\")\n      .then(res => res.json())\n      .then(todos => {\n        this.setState({ todos: todos.data });\n      });\n  };\n\n  componentDidMount() {\n    this.handleGetAllTodos();\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <TodosProvider\n          value={{\n            state,\n            handleDeleteTodo: this.handleDeleteTodo,\n            handleChange: this.handleChange,\n            handleSubmit: this.handleSubmit,\n            handleToggleDone: this.handleToggleDone\n          }}\n        >\n          <TodoForm />\n          <TodosList />\n        </TodosProvider>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}